// Generated by CoffeeScript 1.7.1
var App, Player, PlayerAudio, PlayerHead, Playlist, PlaylistItem, R, channel, denormalize, el, exttype, fetchdata, lpad, memottl, normalize, pathname, sock, time, trim;

R = React.DOM;

$.cookie.json = true;

el = document.createElement('a');

el.href = window.location.href;

pathname = el.pathname.split('/');

channel = 'bluejam';

if (pathname.length === 3) {
  if (pathname[0] === '' && pathname[1] === 'c') {
    channel = pathname[2].toLowerCase();
  }
}

sock = null;

sock = io.connect('/channel');

exttype = {
  mp3: 'audio/mpeg',
  m4a: 'video/mp4',
  webm: 'video/webm'
};

time = {
  tdelta: 0.0,
  tdeltalist: [],
  time: function() {
    return (new Date).getTime() / 1000;
  },
  synctime: function() {
    return (new Date).getTime() / 1000 + time.tdelta;
  },
  remote: function(t) {
    return t + time.tdelta;
  },
  local: function(t) {
    return t - time.tdelta;
  }
};

memottl = function(fn, ttl) {
  var memo;
  memo = {};
  return function() {
    var key;
    key = Array.prototype.join.call(arguments, 'ยง');
    if (key in memo) {
      return memo[key];
    }
    if (ttl) {
      setTimeout((function() {
        return delete memo[key];
      }), ttl);
    }
    return memo[key] = fn.apply(this, arguments);
  };
};

normalize = function(url) {
  var fn, k, name, _ref;
  _ref = arguments.callee.fn;
  for (name in _ref) {
    fn = _ref[name];
    k = fn(url);
    if (k) {
      return k;
    }
  }
};

normalize.fn = {
  youtube: function(url) {
    var match, regex;
    regex = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
    match = url.match(regex);
    if (match && match[2].length === 11) {
      return 'youtube:' + match[2];
    }
  },
  soundcloud: function(url) {
    var match;
    match = url.match(/^.*soundcloud.com\/([^\/]+)\/([^\/]+)$/);
    if (match) {
      return 'soundcloud:' + match[1] + '/' + match[2];
    }
    match = url.match(/^.*snd\.sc\/([^\/]+)$/);
    if (match) {
      return 'soundcloud:' + match[1];
    }
  }
};

normalize = _.memoize(normalize);

denormalize = function(vidkey) {
  vidkey = vidkey.split(':');
  return arguments.callee.fn[vidkey[0]](vidkey[1]);
};

denormalize.fn = {
  youtube: function(subkey) {
    return 'http://www.youtube.com/watch?v=' + subkey;
  },
  soundcloud: function(subkey) {
    if (subkey.indexOf('/') < 0) {
      return 'http://snd.sc/' + subkey;
    } else {
      return 'http://soundcloud.com/' + subkey;
    }
  }
};

denormalize = _.memoize(denormalize);

fetchdata = function(vidkey) {
  var subkey, svc, _ref;
  _ref = vidkey.split(':'), svc = _ref[0], subkey = _ref[1];
  return arguments.callee.fn[svc](vidkey, svc, subkey);
};

fetchdata.fn = {
  youtube: function(vidkey, svc, subkey) {
    return $.getJSON('http://gdata.youtube.com/feeds/api/videos/' + subkey + '?v=2&alt=json&callback=?').then((function(_this) {
      return function(data) {
        return {
          vidkey: vidkey,
          url: denormalize(vidkey),
          title: data.entry.title.$t,
          duration: data.entry.media$group.yt$duration.seconds
        };
      };
    })(this));
  },
  soundcloud: function(vidkey, svc, subkey) {
    return $.getJSON('http://api.sndcdn.com/resolve?url=' + encodeURIComponent(denormalize(vidkey)) + '&format=json&client_id=YOUR_CLIENT_ID&callback=?').then((function(_this) {
      return function(artifact) {
        if ('errors' in artifact) {
          return null;
        }
        return $.getJSON(artifact.uri + '/streams?format=json&client_id=YOUR_CLIENT_ID&callback=?').then(function(formats) {
          var ext, fmt, streams, url;
          streams = {};
          for (fmt in formats) {
            url = formats[fmt];
            fmt = fmt.split('_');
            if (fmt[0] === 'http') {
              if (!(fmt[1] in streams)) {
                streams[fmt[1]] = [];
              }
              streams[fmt[1]].push({
                ext: fmt[1],
                type: exttype[fmt[1]],
                abr: +fmt[2],
                url: url
              });
            }
          }
          for (ext in streams) {
            streams[ext].sort(function(a, b) {
              return b.abr - a.abr;
            });
            streams[ext] = streams[ext][0];
          }
          return {
            vidkey: vidkey,
            url: artifact.permalink_url,
            title: artifact.title,
            duration: artifact.duration / 1000,
            format: streams
          };
        });
      };
    })(this));
  }
};

fetchdata = memottl(fetchdata, 300000);

trim = function(s) {
  return s.replace(/^\s+|\s+$/g, '');
};

lpad = function(n, width, z) {
  z = z || '0';
  n = n + '';
  if (n.length >= width) {
    return n;
  } else {
    return new Array(width - n.length + 1).join(z) + n;
  }
};

PlayerHead = React.createClass({
  getInitialState: function() {
    return {
      title: this.props.vidkey,
      minutes: 0,
      seconds: 0
    };
  },
  componentDidMount: function() {
    if (this.props.vidkey) {
      return fetchdata(this.props.vidkey).done((function(_this) {
        return function(data) {
          return _this.setState({
            title: data.title,
            minutes: parseInt(data.duration / 60),
            seconds: parseInt(Math.round(data.duration % 60))
          });
        };
      })(this));
    }
  },
  render: function() {
    var requested;
    requested = this.props.vidkey in this.props.request;
    document.title = "" + this.state.title + " - " + channel + " - jam with friends";
    return R.div({
      style: {
        textAlign: 'center',
        margin: '0.15em auto'
      }
    }, R.span({
      className: 'label label-' + (requested ? 'success' : 'default'),
      style: {
        fontWeight: 'bold'
      },
      onClick: (function(_this) {
        return function(evt) {
          return (requested ? _this.props.removeFavorite : _this.props.addFavorite)(_this.props.vidkey);
        };
      })(this)
    }, R.i({
      className: 'glyphicon glyphicon-' + (requested ? 'heart' : 'heart-empty')
    })), ' ', R.span({
      className: 'label label-danger',
      style: {
        fontWeight: 'bold'
      },
      onClick: (function(_this) {
        return function(evt) {
          return _this.props.skip();
        };
      })(this)
    }, R.i({
      className: 'glyphicon glyphicon-remove'
    })), " " + this.state.minutes + ":" + (lpad(this.state.seconds, 2)) + " - ", R.a({
      href: denormalize(this.props.vidkey, {
        target: '_blank'
      })
    }, R.span({
      style: {
        color: '#fff'
      }
    }, this.state.title)));
  }
});

PlayerAudio = React.createClass({
  getInitialState: function() {
    return {
      muted: false,
      volume: 1,
      lastfmt: null
    };
  },
  componentDidMount: function() {
    var errback, node, self, v;
    self = this;
    node = this.getDOMNode();
    if (self.props.vidkey) {
      v = self.props.getvolume();
      node.muted = v.muted;
      node.volume = v.volume;
      node.addEventListener('stalled', function() {
        return this.load();
      });
      node.addEventListener('canplay', function() {
        this.removeEventListener('canplay', arguments.callee);
        this.addEventListener('ended', function() {
          return sock.emit('end', {
            vidkey: self.props.vidkey,
            reason: 'end'
          });
        });
        this.currentTime = time.synctime() - self.props.time;
        return this.play();
      });
      node.addEventListener('volumechange', function() {
        return self.props.setvolume(this.volume, this.muted);
      });
      errback = function(evt) {
        if (node.currentSrc === '') {
          return sock.emit('end', {
            vidkey: self.props.vidkey,
            reason: 'error'
          });
        } else if (node.networkState === 3) {
          return console.log('NETWORK_NO_SOURCE');
        }
      };
      return node.addEventListener('error', _.debounce(errback, 100), true);
    } else {
      node.pause();
      return node.currentTime = 0;
    }
  },
  render: function() {
    var fmt, source, _i, _len, _ref;
    source = [];
    if (this.props.vidkey) {
      _ref = ['m4a', 'mp3', 'webm'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fmt = _ref[_i];
        if (fmt in this.props.format) {
          source.push(R.source({
            src: this.props.format[fmt].url,
            type: this.props.format[fmt].type
          }));
        }
      }
    }
    return R.audio({
      controls: 'controls',
      style: {
        width: '100%'
      }
    }, source);
  }
});

Player = React.createClass({
  getInitialState: function() {
    return {
      vidkey: null,
      title: null,
      format: null,
      time: null,
      muted: false,
      volume: 1
    };
  },
  componentDidMount: function() {
    return sock.on('play', (function(_this) {
      return function(msg) {
        return fetchdata(msg.vidkey).done(function(data) {
          _this.setState({
            vidkey: null
          });
          return _.defer(function() {
            return _this.setState({
              vidkey: data.vidkey,
              title: data.title,
              format: 'format' in data ? data.format : msg.format,
              time: msg.time
            });
          });
        });
      };
    })(this));
  },
  render: function() {
    document.title = "" + channel + " - jam with friends";
    return R.div(null, this.state.vidkey ? [
      PlayerHead({
        vidkey: this.state.vidkey,
        skip: this.skip,
        request: this.props.request,
        addFavorite: this.props.addFavorite,
        removeFavorite: this.props.removeFavorite
      }), PlayerAudio({
        vidkey: this.state.vidkey,
        format: this.state.format,
        time: this.state.time,
        getvolume: this.getvolume,
        setvolume: this.setvolume
      })
    ] : []);
  },
  getvolume: function() {
    return {
      volume: this.state.volume,
      muted: this.state.muted
    };
  },
  setvolume: function(volume, muted) {
    return this.setState({
      volume: volume,
      muted: muted
    });
  },
  skip: function() {
    var vidkey;
    vidkey = this.state.vidkey;
    if (vidkey) {
      this.setState({
        vidkey: null
      });
      return sock.emit('end', {
        vidkey: vidkey,
        reason: 'skip'
      });
    }
  }
});

PlaylistItem = React.createClass({
  getInitialState: function() {
    return {
      title: this.props.vidkey,
      minutes: 0,
      seconds: 0
    };
  },
  componentDidMount: function() {
    return fetchdata(this.props.vidkey).done((function(_this) {
      return function(data) {
        var ex;
        try {
          return _this.setState({
            title: data.title,
            minutes: parseInt(data.duration / 60),
            seconds: parseInt(Math.round(data.duration % 60))
          });
        } catch (_error) {
          ex = _error;
        }
      };
    })(this));
  },
  render: function() {
    var requested;
    requested = this.props.vidkey in this.props.request;
    return R.tr({
      style: {
        margin: '0.5em auto'
      }
    }, R.td({
      style: {
        width: '1em'
      }
    }, R.span({
      className: 'label label-' + (requested ? 'success' : 'default'),
      style: {
        fontWeight: 'bold'
      },
      onClick: (function(_this) {
        return function(evt) {
          return (requested ? _this.props.removeFavorite : _this.props.addFavorite)(_this.props.vidkey);
        };
      })(this)
    }, R.i({
      className: 'glyphicon glyphicon-' + (requested ? 'heart' : 'heart-empty')
    }), 'frequency' in this.props ? " " + this.props.frequency : ' ')), R.td({
      style: {
        width: '1em',
        textAlign: 'right'
      }
    }, R.span(null, "" + this.state.minutes + ":" + (lpad(this.state.seconds, 2)))), R.td(null, R.a({
      href: denormalize(this.props.vidkey, {
        target: '_blank'
      })
    }, this.state.title)));
  }
});

Playlist = React.createClass({
  getInitialState: function() {
    return {
      query: '',
      resultset: [],
      queue: []
    };
  },
  componentDidMount: function() {
    return sock.on('queue', (function(_this) {
      return function(msg) {
        return _this.setState({
          queue: msg.queue
        });
      };
    })(this));
  },
  render: function() {
    var item;
    return R.div(null, R.div({
      className: 'row'
    }, R.div({
      className: 'col-md-8'
    }, R.div({
      className: 'input-group'
    }, R.i({
      className: 'input-group-addon glyphicon glyphicon-search'
    }), R.input({
      type: 'text',
      className: 'form-control',
      onChange: (function(_this) {
        return function(evt) {
          return _this.search(evt.target.value);
        };
      })(this),
      placeholder: 'Search or URL: YouTube | SoundCloud',
      value: this.state.query
    }), R.div({
      className: 'input-group-btn'
    }, R.button({
      className: 'btn btn-default',
      onClick: this.searchclear
    }, R.i({
      className: 'glyphicon glyphicon-remove-circle'
    }))))), R.div({
      className: 'col-md-4',
      style: {
        textAlign: 'right'
      }
    }, R.button({
      className: 'btn btn-default',
      onClick: (function(_this) {
        return function(evt) {
          return _this.addRick();
        };
      })(this)
    }, '+Rick'), ' ', R.button({
      className: 'btn btn-default',
      onClick: (function(_this) {
        return function(evt) {
          return _this.addKHS();
        };
      })(this)
    }, '+KHS'), ' ', R.button({
      className: 'btn btn-default',
      onClick: (function(_this) {
        return function(evt) {
          return _this.addEDM();
        };
      })(this)
    }, '+EDM'))), R.table({
      className: 'table',
      style: {
        display: (this.state.resultset.length > 0 ? 'block' : 'none'),
        fontSize: '1em'
      }
    }, R.tbody(null, (function() {
      var _i, _len, _ref, _results;
      _ref = this.state.resultset;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(PlaylistItem({
          key: item,
          request: this.props.request,
          vidkey: item,
          addFavorite: this.props.addFavorite,
          removeFavorite: this.props.removeFavorite
        }));
      }
      return _results;
    }).call(this))), R.table({
      className: 'table',
      style: {
        fontSize: '1em'
      }
    }, R.tbody(null, (function() {
      var _i, _len, _ref, _results;
      _ref = this.state.queue;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(PlaylistItem({
          key: item[0],
          request: this.props.request,
          vidkey: item[0],
          frequency: item[1],
          addFavorite: this.props.addFavorite,
          removeFavorite: this.props.removeFavorite
        }));
      }
      return _results;
    }).call(this))));
  },
  search: function(query) {
    this.setState({
      query: query
    });
    query = trim(query);
    if (query) {
      return this.searchexec(query);
    } else {
      return this.setState({
        resultset: []
      });
    }
  },
  searchclear: function() {
    return this.search('');
  },
  searchexec: _.debounce(function(query) {
    var vidkey;
    vidkey = normalize(query);
    if (vidkey) {
      return this.setState({
        resultset: [vidkey]
      });
    } else {
      return $.getJSON('http://gdata.youtube.com/feeds/api/videos?q=' + encodeURIComponent(query) + '&max-results=5&v=2&alt=json&callback=?').then((function(_this) {
        return function(data) {
          var result;
          return _this.setState({
            resultset: (function() {
              var _i, _len, _ref, _results;
              _ref = data.feed.entry;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                result = _ref[_i];
                _results.push(normalize(result.link[0].href));
              }
              return _results;
            })()
          });
        };
      })(this));
    }
  }, 500),
  addRick: function() {
    this.props.addFavorite('youtube:dQw4w9WgXcQ');
    return this.props.addFavorite('youtube:5zFh5euYntU');
  },
  addKHS: function() {
    this.props.addFavorite('youtube:a2RA0vsZXf8');
    this.props.addFavorite('youtube:n-BXNXvTvV4');
    return this.props.addFavorite('youtube:6y1aOg_UO_A');
  },
  addEDM: function() {
    this.props.addFavorite('youtube:RIXcWo1DBSE');
    this.props.addFavorite('youtube:vIM3tVCi0wg');
    return this.props.addFavorite('youtube:j5U8lXoW2EM');
  }
});

App = React.createClass({
  getInitialState: function() {
    var jam, r;
    r = {
      connected: false,
      favorite: []
    };
    jam = $.cookie('jam.' + this.props.channel);
    if (jam && jam.v >= 1) {
      r.favorite = jam.f;
    }
    r.count = 1;
    return r;
  },
  persist: function() {
    return $.cookie('jam.' + this.props.channel, {
      v: 1,
      f: this.state.favorite
    }, {
      expires: 14
    });
  },
  sendRequest: function() {
    sock.emit('tdelta', time.time());
    return sock.emit('request', this.state.favorite);
  },
  addFavorite: function(vidkey, propagate) {
    var idx;
    if (propagate == null) {
      propagate = true;
    }
    idx = this.state.favorite.indexOf(vidkey);
    if (idx < 0) {
      this.state.favorite.push(vidkey);
      this.setState({
        favorite: this.state.favorite
      });
      if (propagate) {
        this.sendRequest();
      }
      return this.persist();
    }
  },
  removeFavorite: function(vidkey, propagate) {
    var idx;
    if (propagate == null) {
      propagate = true;
    }
    idx = this.state.favorite.indexOf(vidkey);
    if (idx >= 0) {
      this.state.favorite.splice(idx, 1);
      this.setState({
        favorite: this.state.favorite
      });
      if (propagate) {
        this.sendRequest();
      }
      return this.persist();
    }
  },
  componentDidMount: function() {
    this.sendRequest();
    sock.on('connect', (function(_this) {
      return function() {
        _this.setState({
          connected: true
        });
        sock.emit('join', channel);
        return _this.sendRequest();
      };
    })(this));
    sock.on('disconnect', (function(_this) {
      return function() {
        return _this.setState({
          connected: false
        });
      };
    })(this));
    sock.on('tdelta', function(msg) {
      time.tdeltalist.push(msg);
      return time.tdelta = (time.tdeltalist.reduce(function(a, b) {
        return a + b;
      })) / time.tdeltalist.length;
    });
    return sock.on('count', (function(_this) {
      return function(msg) {
        return _this.setState({
          count: msg.participant
        });
      };
    })(this));
  },
  render: function() {
    var c, i, request, _i, _len, _ref;
    request = {};
    _ref = this.state.favorite;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      request[i] = true;
    }
    return R.div(null, R.div({
      className: 'navbar navbar-default navbar-fixed-top',
      role: 'navigation'
    }, R.div({
      className: 'container'
    }, R.div({
      className: 'navbar-header'
    }, R.button({
      className: 'navbar-toggle',
      type: 'button',
      'data-toggle': 'collapse',
      'data-target': '.navbar-collapse'
    }, R.span({
      className: 'sr-only'
    }, 'Toggle navigation'), R.span({
      className: 'icon-bar'
    }), R.span({
      className: 'icon-bar'
    }), R.span({
      className: 'icon-bar'
    })), R.a({
      className: 'navbar-brand',
      href: '#'
    }, 'jam with friends')), R.div({
      className: 'collapse navbar-collapse'
    }, R.ul({
      className: 'nav navbar-nav'
    }, (function() {
      var _j, _len1, _ref1, _results;
      _ref1 = ['bluejam', 'thh', 'epiccyndaquil', 'mop', 'pwnna', 'crispy'];
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        c = _ref1[_j];
        _results.push(R.li({
          className: channel === c ? 'active' : ''
        }, R.a({
          href: '/c/' + c
        }, c)));
      }
      return _results;
    })())))), R.div({
      className: 'container'
    }, R.div({
      className: 'row',
      style: {
        marginBottom: '1.2em'
      }
    }, R.div({
      className: 'col-md-4'
    }, R.h1({
      style: {
        margin: '0'
      }
    }, R.a({
      href: "/c/" + channel,
      style: {
        color: '#fff'
      }
    }, "" + channel), this.state.connected ? " | " + this.state.count : ''), R.h3({
      style: {
        margin: '0'
      }
    }, R.a({
      href: "/c/" + channel,
      style: {
        color: '#fff'
      }
    }, "" + window.location.host + "/c/" + channel))), R.div({
      className: 'col-md-8',
      style: {
        marginTop: '0.5em'
      }
    }, Player({
      request: request,
      addFavorite: this.addFavorite,
      removeFavorite: this.removeFavorite
    }))), R.div({
      className: 'row'
    }, R.div({
      className: 'col-md-12'
    }, Playlist({
      request: request,
      addFavorite: this.addFavorite,
      removeFavorite: this.removeFavorite
    })))));
  }
});

React.renderComponent(App({
  channel: channel
}), document.getElementById('app'));
